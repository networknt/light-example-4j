{"basePath": "/v2","paths":{"/pet":{"post":{"summary": "Add a new pet to the store","security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],"produces": [
          "application/xml",
          "application/json"
        ],"description": "","operationId": "addPet","responses":{"405": {
            "description": "Invalid input"
          }},"parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Pet object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          }
        ],"tags": [
          "pet"
        ],"consumes": [
          "application/json",
          "application/xml"
        ]},"put":{"summary": "Update an existing pet","security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],"produces": [
          "application/xml",
          "application/json"
        ],"description": "","operationId": "updatePet","responses":{"400": {
            "description": "Invalid ID supplied"
          },"404": {
            "description": "Pet not found"
          },"405": {
            "description": "Validation exception"
          }},"parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Pet object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          }
        ],"tags": [
          "pet"
        ],"consumes": [
          "application/json",
          "application/xml"
        ]}},"/user/{username}":{"delete":{"summary": "Delete user","produces": [
          "application/xml",
          "application/json"
        ],"description": "This can only be done by the logged in user.","operationId": "deleteUser","responses":{"400": {
            "description": "Invalid username supplied"
          },"404": {
            "description": "User not found"
          }},"parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],"tags": [
          "user"
        ]},"put":{"summary": "Updated user","produces": [
          "application/xml",
          "application/json"
        ],"description": "This can only be done by the logged in user.","operationId": "updateUser","responses":{"400": {
            "description": "Invalid user supplied"
          },"404": {
            "description": "User not found"
          }},"parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],"tags": [
          "user"
        ]},"get":{"summary": "Get user by user name","produces": [
          "application/xml",
          "application/json"
        ],"description": "","operationId": "getUserByName","responses":{"400": {
            "description": "Invalid username supplied"
          },"404": {
            "description": "User not found"
          },"200":{"schema": {
              "$ref": "#/definitions/User"
            },"description": "successful operation"}},"parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "type": "string"
          }
        ],"tags": [
          "user"
        ]}},"/pet/findByStatus":{"get":{"summary": "Finds Pets by status","security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],"produces": [
          "application/xml",
          "application/json"
        ],"description": "Multiple status values can be provided with comma separated strings","operationId": "findPetsByStatus","responses":{"400": {
            "description": "Invalid status value"
          },"200":{"schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pet"
              }
            },"description": "successful operation"}},"parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "available",
                "pending",
                "sold"
              ],
              "default": "available"
            },
            "collectionFormat": "multi"
          }
        ],"tags": [
          "pet"
        ]}},"/user/createWithList":{"post":{"summary": "Creates list of users with given input array","produces": [
          "application/xml",
          "application/json"
        ],"description": "","operationId": "createUsersWithListInput","responses":{"default": {
            "description": "successful operation"
          }},"parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of user object",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        ],"tags": [
          "user"
        ]}},"/pet/{petId}/uploadImage":{"post":{"summary": "uploads an image","security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],"produces": [
          "application/json"
        ],"description": "","operationId": "uploadFile","responses":{"200":{"schema": {
              "$ref": "#/definitions/ApiResponse"
            },"description": "successful operation"}},"parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to update",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "additionalMetadata",
            "in": "formData",
            "description": "Additional data to pass to server",
            "required": false,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "file to upload",
            "required": false,
            "type": "file"
          }
        ],"tags": [
          "pet"
        ],"consumes": [
          "multipart/form-data"
        ]}},"/store/inventory":{"get":{"summary": "Returns pet inventories by status","security": [
          {
            "petstore_auth": [
              "read:pets"
            ]
          }
        ],"produces": [
          "application/json"
        ],"description": "Returns a map of status codes to quantities","operationId": "getInventory","responses":{"200":{"schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int32"
              }
            },"description": "successful operation"}},"parameters": [],"tags": [
          "store"
        ]}},"/user/login":{"get":{"summary": "Logs user into the system","produces": [
          "application/xml",
          "application/json"
        ],"description": "","operationId": "loginUser","responses":{"400": {
            "description": "Invalid username/password supplied"
          },"200":{"schema": {
              "type": "string"
            },"description": "successful operation","headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }}},"parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],"tags": [
          "user"
        ]}},"/user":{"post":{"summary": "Create user","produces": [
          "application/xml",
          "application/json"
        ],"description": "This can only be done by the logged in user.","operationId": "createUser","responses":{"default": {
            "description": "successful operation"
          }},"parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],"tags": [
          "user"
        ]}},"/user/createWithArray":{"post":{"summary": "Creates list of users with given input array","produces": [
          "application/xml",
          "application/json"
        ],"description": "","operationId": "createUsersWithArrayInput","responses":{"default": {
            "description": "successful operation"
          }},"parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of user object",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        ],"tags": [
          "user"
        ]}},"/pet/findByTags":{"get":{"summary": "Finds Pets by tags","security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],"deprecated":true,"produces": [
          "application/xml",
          "application/json"
        ],"description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.","operationId": "findPetsByTags","responses":{"400": {
            "description": "Invalid tag value"
          },"200":{"schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pet"
              }
            },"description": "successful operation"}},"parameters": [
          {
            "name": "tags",
            "in": "query",
            "description": "Tags to filter by",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],"tags": [
          "pet"
        ]}},"/store/order":{"post":{"summary": "Place an order for a pet","produces": [
          "application/xml",
          "application/json"
        ],"description": "","operationId": "placeOrder","responses":{"400": {
            "description": "Invalid Order"
          },"200":{"schema": {
              "$ref": "#/definitions/Order"
            },"description": "successful operation"}},"parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "order placed for purchasing the pet",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],"tags": [
          "store"
        ]}},"/user/logout":{"get":{"summary": "Logs out current logged in user session","produces": [
          "application/xml",
          "application/json"
        ],"description": "","operationId": "logoutUser","responses":{"default": {
            "description": "successful operation"
          }},"parameters": [],"tags": [
          "user"
        ]}},"/pet/{petId}":{"post":{"summary": "Updates a pet in the store with form data","security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],"produces": [
          "application/xml",
          "application/json"
        ],"description": "","operationId": "updatePetWithForm","responses":{"405": {
            "description": "Invalid input"
          }},"parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet that needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "Updated name of the pet",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "formData",
            "description": "Updated status of the pet",
            "required": false,
            "type": "string"
          }
        ],"tags": [
          "pet"
        ],"consumes": [
          "application/x-www-form-urlencoded"
        ]},"delete":{"summary": "Deletes a pet","security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],"produces": [
          "application/xml",
          "application/json"
        ],"description": "","operationId": "deletePet","responses":{"400": {
            "description": "Invalid ID supplied"
          },"404": {
            "description": "Pet not found"
          }},"parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "petId",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],"tags": [
          "pet"
        ]},"get":{"summary": "Find pet by ID","security": [
          {
            "petstore_auth": [
              "read:pets"
            ]
          }
        ],"produces": [
          "application/xml",
          "application/json"
        ],"description": "Returns a single pet","operationId": "getPetById","responses":{"400": {
            "description": "Invalid ID supplied"
          },"404": {
            "description": "Pet not found"
          },"200":{"schema": {
              "$ref": "#/definitions/Pet"
            },"examples":{"application/json": {
                "photoUrls": [
                  "aeiou"
                ],
                "name": "doggie",
                "id": 123456789,
                "category": {
                  "name": "aeiou",
                  "id": 123456789
                },
                "tags": [
                  {
                    "name": "aeiou",
                    "id": 123456789
                  }
                ],
                "status": "aeiou"
              }},"description": "successful operation"}},"parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],"tags": [
          "pet"
        ]}},"/store/order/{orderId}":{"delete":{"summary": "Delete purchase order by ID","produces": [
          "application/xml",
          "application/json"
        ],"description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors","operationId": "deleteOrder","responses":{"400": {
            "description": "Invalid ID supplied"
          },"404": {
            "description": "Order not found"
          }},"parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order that needs to be deleted",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],"tags": [
          "store"
        ]},"get":{"summary": "Find purchase order by ID","produces": [
          "application/xml",
          "application/json"
        ],"description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions","operationId": "getOrderById","responses":{"400": {
            "description": "Invalid ID supplied"
          },"404": {
            "description": "Order not found"
          },"200":{"schema": {
              "$ref": "#/definitions/Order"
            },"description": "successful operation"}},"parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of pet that needs to be fetched",
            "required": true,
            "type": "integer",
            "maximum": 10,
            "minimum": 1,
            "format": "int64"
          }
        ],"tags": [
          "store"
        ]}}},"host": "petstore.swagger.io","schemes": [
    "http"
  ],"externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },"securityDefinitions": {
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    }
  },"definitions":{"Order":{"type": "object","properties":{"id":{"type": "integer","format": "int64"},"petId":{"type": "integer","format": "int64"},"quantity":{"type": "integer","format": "int32"},"shipDate":{"type": "string","format": "date-time"},"complete":{"type": "boolean","default":false},"status":{"type": "string","description": "Order Status","enum":["placed",
            "approved",
            "delivered"]}},"xml": {
        "name": "Order"
      }},"Category":{"type": "object","properties":{"name":{"type": "string"},"id":{"type": "integer","format": "int64"}},"xml": {
        "name": "Category"
      }},"User":{"type": "object","properties":{"firstName":{"type": "string"},"lastName":{"type": "string"},"password":{"type": "string"},"userStatus":{"type": "integer","format": "int32","description": "User Status"},"phone":{"type": "string"},"id":{"type": "integer","format": "int64"},"email":{"type": "string"},"username":{"type": "string"}},"xml": {
        "name": "User"
      }},"Tag":{"type": "object","properties":{"name":{"type": "string"},"id":{"type": "integer","format": "int64"}},"xml": {
        "name": "Tag"
      }},"Pet":{"type": "object","required":["name",
        "photoUrls"],"properties":{"name":{"type": "string","example": "doggie"},"id":{"type": "integer","format": "int64"},"photoUrls":{"type": "array","items":{"type": "string"},"xml": {
            "name": "photoUrl",
            "wrapped": true
          }},"category":{"$ref": "#/definitions/Category"},"tags":{"type": "array","items":{"$ref": "#/definitions/Tag"},"xml": {
            "name": "tag",
            "wrapped": true
          }},"status":{"type": "string","description": "pet status in the store","enum":["available",
            "pending",
            "sold"]}},"xml": {
        "name": "Pet"
      }},"ApiResponse":{"type": "object","properties":{"type":{"type": "string"},"message":{"type": "string"},"code":{"type": "integer","format": "int32"}}}},"swagger": "2.0","info": {
    "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
    "version": "1.0.0",
    "title": "Swagger Petstore",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },"tags": [
    {
      "name": "pet",
      "description": "Everything about your Pets",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "store",
      "description": "Access to Petstore orders"
    },
    {
      "name": "user",
      "description": "Operations about user",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io"
      }
    }
  ]}
