
# Singleton service factory configuration/IoC injection
singletons:

- javax.sql.DataSource:
  - com.zaxxer.hikari.HikariDataSource:
      jdbcUrl: jdbc:mysql://mysql:3306/eventuate?useSSL=false
      username: mysqluser
      password: mysqlpw
      maximumPoolSize: 15
      useServerPrepStmts: true
      cachePrepStmts: true
      cacheCallableStmts: true
      prepStmtCacheSize: 4096
      prepStmtCacheSqlLimit: 2048
# IdGeneratorImpl implements IdGenerator without any parameter dependency
- com.networknt.eventuate.jdbc.IdGenerator:
  - com.networknt.eventuate.jdbc.IdGeneratorImpl
- com.networknt.tram.consumer.kafka.DuplicateMessageDetector:
  - com.networknt.tram.consumer.kafka.SqlTableBasedDuplicateMessageDetector
- com.networknt.tram.message.consumer.MessageConsumer:
  - com.networknt.tram.consumer.kafka.MessageConsumerKafkaImpl
- com.networknt.tram.message.producer.MessageProducer:
  - com.networknt.tram.message.producer.jdbc.MessageProducerJdbcImpl
# SagaLockManagerImpl implements SagaLockManager and depends on DataSource.
- com.networknt.saga.participant.SagaLockManager:
  - com.networknt.saga.participant.SagaLockManagerImpl
- com.networknt.example.sagas.ordersandcustomers.data.TramCommandsAndEventsIntegrationData:
  - com.networknt.example.sagas.ordersandcustomers.data.TramCommandsAndEventsIntegrationData
# ChannelMapping depends on TramCommandsAndEventsIntegrationData
- com.networknt.tram.command.common.ChannelMapping: com.networknt.saga.example.order.service.OrderServiceInitializer::channelMapping
# SagaInstanceRepositoryJdbc depends on IdGenerator and DataSource
- com.networknt.saga.orchestration.SagaInstanceRepository:
  - com.networknt.saga.orchestration.SagaInstanceRepositoryJdbc
# AggregateInstanceSubscriptionsDAOImpl depends on DataSource
- com.networknt.saga.orchestration.AggregateInstanceSubscriptionsDAO:
  - com.networknt.saga.orchestration.AggregateInstanceSubscriptionsDAOImpl
# EnlistedAggregatesDaoImpl depends on DataSource
- com.networknt.saga.orchestration.EnlistedAggregatesDao:
  - com.networknt.saga.orchestration.EnlistedAggregatesDaoImpl
# CommandProducerImpl depends on MessageProducer and ChannelMapping
- com.networknt.tram.command.producer.CommandProducer:
  - com.networknt.tram.command.producer.CommandProducerImpl
# DomainEventPublisherImpl depends on MessageProducer
- com.networknt.tram.event.publisher.DomainEventPublisher:
  - com.networknt.tram.event.publisher.DomainEventPublisherImpl
# CreateOrderSaga doesn't depend on anything
- com.networknt.example.sagas.ordersandcustomers.order.saga.createorder.CreateOrderSaga: com.networknt.saga.example.order.service.OrderServiceInitializer::createOrderSaga
# createOrderSagaManager depends on CreateOrderSaga and a lot other beans above.
- com.networknt.saga.orchestration.SagaManager: com.networknt.saga.example.order.service.OrderServiceInitializer::createOrderSagaManager
# MapConsumerRepository implements CustomerRepository with no other dependency
- com.networknt.example.sagas.ordersandcustomers.order.domain.OrderRepository:
  - com.networknt.example.sagas.ordersandcustomers.order.domain.OrderRepositoryJdbc
- com.networknt.example.sagas.ordersandcustomers.order.service.OrderService:
  - com.networknt.example.sagas.ordersandcustomers.order.service.OrderService
# OrderCommandHandler depends on OrderRepository defined above
- com.networknt.example.sagas.ordersandcustomers.order.service.OrderCommandHandler:
  - com.networknt.example.sagas.ordersandcustomers.order.service.OrderCommandHandler


# OpenAPI parser validator implementation
- com.networknt.oas.validator.Validator<com.networknt.oas.model.Callback>:
  - com.networknt.oas.validator.impl.CallbackValidator
- com.networknt.oas.validator.Validator<com.networknt.oas.model.Contact>:
  - com.networknt.oas.validator.impl.ContactValidator
- com.networknt.oas.validator.Validator<com.networknt.oas.model.EncodingProperty>:
  - com.networknt.oas.validator.impl.EncodingPropertyValidator
- com.networknt.oas.validator.Validator<com.networknt.oas.model.Example>:
  - com.networknt.oas.validator.impl.ExampleValidator
- com.networknt.oas.validator.Validator<com.networknt.oas.model.ExternalDocs>:
  - com.networknt.oas.validator.impl.ExternalDocsValidator
- com.networknt.oas.validator.Validator<com.networknt.oas.model.Header>:
  - com.networknt.oas.validator.impl.HeaderValidator
- com.networknt.oas.validator.Validator<com.networknt.oas.model.License>:
  - com.networknt.oas.validator.impl.LicenseValidator
- com.networknt.oas.validator.Validator<com.networknt.oas.model.Info>:
  - com.networknt.oas.validator.impl.InfoValidator
- com.networknt.oas.validator.Validator<com.networknt.oas.model.Link>:
  - com.networknt.oas.validator.impl.LinkValidator
- com.networknt.oas.validator.Validator<com.networknt.oas.model.Schema>:
  - com.networknt.oas.validator.impl.SchemaValidator
- com.networknt.oas.validator.Validator<com.networknt.oas.model.MediaType>:
  - com.networknt.oas.validator.impl.MediaTypeValidator
- com.networknt.oas.validator.Validator<com.networknt.oas.model.OAuthFlow>:
  - com.networknt.oas.validator.impl.OAuthFlowValidator
- com.networknt.oas.validator.Validator<com.networknt.oas.model.OpenApi3>:
  - com.networknt.oas.validator.impl.OpenApi3Validator
- com.networknt.oas.validator.Validator<com.networknt.oas.model.RequestBody>:
  - com.networknt.oas.validator.impl.RequestBodyValidator
- com.networknt.oas.validator.Validator<com.networknt.oas.model.Operation>:
  - com.networknt.oas.validator.impl.OperationValidator
- com.networknt.oas.validator.Validator<com.networknt.oas.model.Parameter>:
  - com.networknt.oas.validator.impl.ParameterValidator
- com.networknt.oas.validator.Validator<com.networknt.oas.model.Path>:
  - com.networknt.oas.validator.impl.PathValidator
- com.networknt.oas.validator.Validator<com.networknt.oas.model.Response>:
  - com.networknt.oas.validator.impl.ResponseValidator
- com.networknt.oas.validator.Validator<com.networknt.oas.model.SecurityRequirement>:
  - com.networknt.oas.validator.impl.SecurityRequirementValidator
- com.networknt.oas.validator.Validator<com.networknt.oas.model.SecurityScheme>:
  - com.networknt.oas.validator.impl.SecuritySchemeValidator
- com.networknt.oas.validator.Validator<com.networknt.oas.model.Server>:
  - com.networknt.oas.validator.impl.ServerValidator
- com.networknt.oas.validator.Validator<com.networknt.oas.model.ServerVariable>:
  - com.networknt.oas.validator.impl.ServerVariableValidator
- com.networknt.oas.validator.Validator<com.networknt.oas.model.Tag>:
  - com.networknt.oas.validator.impl.TagValidator
- com.networknt.oas.validator.Validator<com.networknt.oas.model.Xml>:
  - com.networknt.oas.validator.impl.XmlValidator
# HandlerProvider implementation
- com.networknt.handler.HandlerProvider:
  - com.networknt.saga.example.order.service.PathHandlerProvider
# StartupHookProvider implementations, there are one to many and they are called in the same sequence defined.
- com.networknt.server.StartupHookProvider:
  - com.networknt.saga.example.order.service.startup.StartUpOrderCommandDispacher
# - com.networknt.server.StartupHookProvider:
  # - com.networknt.server.Test1StartupHook
  # - com.networknt.server.Test2StartupHook
# ShutdownHookProvider implementations, there are one to many and they are called in the same sequence defined.
# - com.networknt.server.ShutdownHookProvider:
  # - com.networknt.server.Test1ShutdownHook
# MiddlewareHandler implementations, the calling sequence is as defined in the request/response chain.
- com.networknt.handler.MiddlewareHandler:
  # Exception Global exception handler that needs to be called first to wrap all middleware handlers and business handlers
  - com.networknt.exception.ExceptionHandler
  # Metrics handler to calculate response time accurately, this needs to be the second handler in the chain.
  - com.networknt.metrics.MetricsHandler
  # Traceability Put traceabilityId into response header from request header if it exists
  - com.networknt.traceability.TraceabilityHandler
  # Correlation Create correlationId if it doesn't exist in the request header and put it into the request header
  - com.networknt.correlation.CorrelationHandler
  # Parsing OpenAPI 3.0 specification based on request uri and method.
  - com.networknt.openapi.OpenApiHandler
  # Security JWT token verification and scope verification (depending on OpenApiHandler)
  - com.networknt.openapi.JwtVerifyHandler
  # Body Parse body based on content type in the header.
  - com.networknt.body.BodyHandler
  # SimpleAudit Log important info about the request into audit log
  - com.networknt.audit.AuditHandler
  # Sanitizer Encode cross site scripting
  - com.networknt.sanitizer.SanitizerHandler
  # Validator Validate request based on OpenAPI 3.0 specification (depending on OpenApiHandler and BodyHandler)
  - com.networknt.openapi.ValidatorHandler
