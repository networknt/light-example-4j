---
openapi: "3.0.0"
info:
  version: "1.0.0"
  title: "Sidecar Backend"
  license:
    name: "MIT"
servers:
  - url: "http://backend.sidecar.networknt.com"
paths:
  /kafka/records:
    post:
      summary: "Post a list of Kafka records"
      operationId: "postRecords"
      requestBody:
        description: "An array of consumer records"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Records"
      security:
        - sidecar_auth:
            - "write:sidecar"
      responses:
        "201":
          description: "Null response"
  /kafka/ksqldb:
    post:
      summary: "Process the ksqlDB record"
      operationId: "ksqlDBProcess"
      requestBody:
        description: "process a ksqlDB row"
        required: true
        content:
          application/json:
            schema:
              type: object
      security:
        - sidecar_auth:
            - "write:sidecar"
      responses:
        "201":
          description: "Null response"
    get:
      summary: "get the ksqlDB record"
      operationId: "ksqlDBget"
      parameters:
        - name: id
          in: query
          required: false
          description: The user id
          schema:
            type: string
        - name: type
          in: query
          required: false
          description: The query type
          schema:
            type: string
        - name: queryname
          in: query
          required: true
          description: The query name to run
          schema:
            type: string
      security:
        - sidecar_auth:
            - "write:sidecar"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Consumer instance not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Status"
  /kafka/dlq/active/producer:
    post:
      summary: "Post a list of Kafka records"
      operationId: "postRecordsToDlq"
      requestBody:
        description: "An array of consumer records"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecordProcessedResults"
      security:
        - sidecar_auth:
            - "write:sidecar"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Consumer instance not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Status"

components:
  securitySchemes:
    sidecar_auth:
      type: "oauth2"
      description: "This API uses OAuth 2 with the client credential grant flow."
      flows:
        clientCredentials:
          tokenUrl: "https://localhost:6882/token"
          scopes:
            write:sidecar: "Add records"
  schemas:
    Records:
      type: "array"
      items:
        $ref: "#/components/schemas/Record"
    Record:
      type: "object"
      properties:
        topic:
          type: "string"
        key:
          oneOf:
            - $ref: "#/components/schemas/StringKey"
            - $ref: "#/components/schemas/ObjectKey"
        value:
          oneOf:
            - $ref: "#/components/schemas/StringValue"
            - $ref: "#/components/schemas/ObjectValue"
        header:
          type: "object"
        partition:
          type: "integer"
          minimum: 0
        offset:
          type: "number"
          minimum: 0
    StringKey:
      type: "string"
    ObjectKey:
      type: "object"
    StringValue:
      type: "string"
    ObjectValue:
      type: "object"
    RecordProcessedResults:
      type: "array"
      items:
        $ref: "#/components/schemas/RecordProcessedResult"
    RecordProcessedResult:
      type: "object"
      properties:
        record:
          $ref: "#/components/schemas/Record"
        key:
          type: string
        correlationId:
          type: string
        traceabilityId:
          type: string
        stacktrace:
          type: string
        processed:
          type: boolean

    Status:
      type: object
      properties:
        statusCode:
          description: HTTP response code
          type: integer
        code:
          description: Code is the machine-readable error code
          type: string
        message:
          description: Error messsage
          type: string
        description:
          description: The detailed description of the error status
          type: string
      required:
        - statusCode
        - code
